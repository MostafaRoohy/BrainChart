diff --git a/brainy_charts/widget.py b/brainy_charts/widget.py
index d079530..b5e9dfb 100644
--- a/brainy_charts/widget.py
+++ b/brainy_charts/widget.py
@@ -92,7 +92,7 @@ index_html_raw = r'''
                     const serverIdByEntityId  = new Map();  // entityId (number) -> server shape id
                     const pendingCreates      = [];         // queue of server IDs that we're about to create
                     const suppressDbDelete    = new Set();  // entityIds we're removing programmatically (don't DELETE)
-                    const renderedSigs        = new Set();  // content signatures to prevent duplicates
+                    const sigById             = new Map();  // server shape id -> last signature
 
 
                     const POLL_MS = 1500;
@@ -119,6 +119,7 @@ index_html_raw = r'''
                                 if (sid != null) {{
                                     serverIdByEntityId.delete(entityId);
                                     renderedById.delete(sid);
+                                    sigById.delete(sid);
                                 }}
                                 return;
                                 }}
@@ -131,6 +132,7 @@ index_html_raw = r'''
                                     .finally(() => {{
                                     serverIdByEntityId.delete(entityId);
                                     renderedById.delete(sid);
+                                    sigById.delete(sid);
                                     }});
                                 }}
                             }}
@@ -168,7 +170,8 @@ index_html_raw = r'''
                         try {{ chart.removeEntity(id); }} catch (_) {{}}
                         }}
                         renderedById.clear();
-                        renderedSigs.clear();
+                        serverIdByEntityId.clear();
+                        sigById.clear();
                     }}
 
                     async function fetchShapes(sym) {{
@@ -180,24 +183,41 @@ index_html_raw = r'''
                         }} catch (_) {{ return []; }}
                     }}
 
-                    async function draw(rec) {{
-                    const sig = makeSig(rec);
-                    if (renderedSigs.has(sig)) return;
-                    if (rec.id && renderedById.has(rec.id)) return;
+async function draw(rec) {{
+  const sig  = makeSig(rec);
+  const pts  = toPoints(rec.points);
+  const opts = Object.assign({{ shape: rec.shape_type }}, rec.options || {{}});
+
+  // If this id already exists and content did not change, skip
+  if (rec.id && sigById.get(rec.id) === sig) return;
+
+  // Update existing entity in-place if this id is already on the chart
+  if (rec.id && renderedById.has(rec.id)) {{
+    const entityId = renderedById.get(rec.id);
+    const api = chart.getShapeById(entityId);
+    try {{
+      if (api) {{
+        api.setPoints(pts);
+        api.setProperties(opts);
+        sigById.set(rec.id, sig);
+        return; // <-- no recreation
+      }}
+    }} catch (e) {{ console.error(e); }}
+    // fallthrough â†’ recreate if api missing/failed
+  }}
+
+  if (rec.id != null) pendingCreates.push(rec.id); // optional, keeps the event flow consistent
+  const entityId = (pts.length === 1)
+    ? chart.createShape(pts[0], opts)
+    : chart.createMultipointShape(pts, opts);
+
+  if (rec.id != null && entityId != null) {{
+    renderedById.set(rec.id, entityId);
+    serverIdByEntityId.set(entityId, rec.id);
+    sigById.set(rec.id, sig);
+  }}
+}}
 
-                    const pts  = toPoints(rec.points);
-                    const opts = Object.assign({{ shape: rec.shape_type }}, rec.options || {{}});
-
-                    const entityId = (pts.length === 1)
-                        ? chart.createShape(pts[0], opts)
-                        : chart.createMultipointShape(pts, opts);
-
-                    if (rec.id != null && entityId != null) {{
-                        renderedById.set(rec.id, entityId);
-                        serverIdByEntityId.set(entityId, rec.id);
-                    }}
-                    renderedSigs.add(sig);
-                    }}
                     
                     async function incrementalRefresh() {{
                         const sym   = chart.symbol();
@@ -215,6 +235,7 @@ index_html_raw = r'''
                             try {{ chart.removeEntity(entityId); }} catch (_) {{}}
                             renderedById.delete(sid);
                             serverIdByEntityId.delete(entityId);
+                            sigById.delete(sid);
                             // keep renderedSigs so reappearing identical content doesn't flicker
                         }}
                         }}
